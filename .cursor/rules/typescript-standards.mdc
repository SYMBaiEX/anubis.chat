---
description: TypeScript code quality and type safety standards
globs: ["*.ts", "*.tsx"]
alwaysApply: false
---

# TypeScript Standards & Quality Guidelines

## Core Type Safety Requirements

- **EXPLICITLY NO ANY TYPES** - Review for correct type structures and create them if they don't exist
- Use strict TypeScript configuration with no implicit any
- Prefer `interface` over `type` for object shapes where possible
- Use `const assertions` and `satisfies` operator for enhanced type safety
- Implement Result/Either patterns for robust error handling

## Naming Conventions

- **STRICTLY USE camelCase** for all variables, functions, and methods
- Use PascalCase for interfaces, types, classes, and components
- Use UPPERCASE_SNAKE_CASE for hardcoded constants and environment variables
- Use kebab-case for file and directory names

## Code Quality Standards

- JSDoc comments for all public APIs and complex functions
- Prefer composition over inheritance in design patterns
- Use pure functions whenever possible for predictability
- Implement proper error boundaries and error handling
- Maintain 2-space indentation with single quotes and trailing commas

## Import & Export Patterns

- Use named exports over default exports for better refactoring support
- Organize imports: external packages → internal modules → relative imports
- Use absolute imports via path mapping when available
- Group related exports in index files for clean API surfaces

## Performance & Bundle Optimization

- Use dynamic imports for code splitting where appropriate
- Prefer tree-shakeable exports and imports
- Avoid heavy dependencies in client-side bundles
- Implement proper memoization for expensive computations

@../CLAUDE.md
@../packages/backend/convex/schema.ts