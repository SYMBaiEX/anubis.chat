---
description: ANUBIS Chat platform vision and comprehensive rule coordination
globs: ["**/*"]
alwaysApply: true
---

# ANUBIS Chat - Next-Generation AI & Web3 Platform

## Platform Vision & Mission

ANUBIS Chat is the definitive AI-powered chat platform that bridges traditional AI interaction with decentralized Web3 capabilities. Our mission is to democratize access to advanced AI while empowering users with blockchain-native features and economic models.

### Core Value Propositions
- **Multi-Model AI Excellence**: Best-in-class AI with intelligent model routing (Claude 3.5, GPT-4o, DeepSeek v3, Gemini 2.0)
- **Web3-Native Experience**: Seamless Solana integration with mobile wallet support and token economics
- **Real-Time Collaboration**: Live chat, document sharing, and collaborative AI workflows
- **Economic Empowerment**: Token rewards, staking, and decentralized marketplace features
- **Enterprise-Ready**: Scalable architecture with security, privacy, and compliance built-in

## Complete Technology Architecture

### Frontend Stack (Next.js 15 + React 19)
- **Framework**: Next.js 15 with App Router and React Server Components
- **Styling**: Tailwind CSS v4 with Shadcn UI design system
- **State Management**: Convex reactive queries + Zustand for complex client state
- **Authentication**: Convex Auth with multi-provider support
- **Web3**: Solana Wallet Adapter with Mobile Wallet Adapter Protocol
- **PWA**: Progressive Web App with offline capabilities and push notifications
- **Monitoring**: Real User Monitoring, error tracking, and performance analytics

### Backend Infrastructure (Convex + Serverless)
- **Primary Backend**: Convex for real-time, serverless data layer
- **AI Orchestration**: Vercel AI SDK with custom model routing
- **Vector Database**: Qdrant for semantic search and RAG capabilities
- **File Storage**: Convex file storage with CDN distribution
- **Analytics**: Custom analytics pipeline with user behavior tracking
- **Caching**: Multi-layer caching strategy (browser, CDN, database)

### AI & Machine Learning Pipeline
- **Model Routing**: Intelligent routing based on task complexity and cost optimization
- **RAG System**: Hybrid semantic + keyword search with contextual chunk expansion
- **Streaming**: Real-time response streaming with backpressure management
- **Personalization**: User behavior analysis and preference learning
- **Content Safety**: Multi-layer content filtering and moderation
- **Performance**: <2s time-to-first-token, <100ms vector search

### Web3 & Blockchain Integration
- **Primary Chain**: Solana for fast, low-cost transactions
- **Wallet Support**: Phantom, Solflare, Backpack, Mobile Wallet Adapter
- **Token Economics**: Native token for platform rewards and governance
- **Smart Contracts**: Anchor framework for secure on-chain logic
- **Mobile Integration**: Solana Mobile Stack for native mobile experience
- **Cross-Chain**: Bridge support for multi-chain asset management

### Development & Operations
- **Monorepo**: Turborepo with Bun package manager
- **CI/CD**: GitHub Actions with automated testing and deployment
- **Quality**: 90%+ test coverage, security scanning, performance monitoring
- **Documentation**: Comprehensive docs with interactive examples
- **Observability**: Distributed tracing, metrics, and alerting

## Rule Hierarchy & Application Strategy

### Always Applied Rules (Global Standards)
- **platform-vision.mdc** - Platform vision and strategic alignment
- **architecture-patterns.mdc** - System architecture and design patterns
- **typescript-standards.mdc** - Type safety and code quality standards
- **security-standards.mdc** - Security and vulnerability prevention
- **performance-optimization.mdc** - Performance monitoring and optimization

### Domain-Specific Rules (Context-Triggered)
- **ai-integration.mdc** - AI/ML pipeline and RAG system patterns
- **web3-solana.mdc** - Blockchain integration and token economics
- **ui-components.mdc** - Design system and accessibility standards
- **real-time-systems.mdc** - Live collaboration and streaming patterns
- **analytics-tracking.mdc** - User analytics and behavior tracking

### Application-Specific Rules (apps/web/.cursor/rules/)
- **nextjs-patterns.mdc** - Next.js 15 and React 19 best practices
- **convex-integration.mdc** - Real-time backend integration patterns
- **chat-interface.mdc** - Chat UI and messaging experience
- **wallet-integration.mdc** - Web3 wallet and transaction patterns
- **pwa-optimization.mdc** - Progressive Web App features
- **testing-standards.mdc** - Comprehensive testing and QA standards

### Development Standards
- **STRICTLY USE camelCase** for all variables and functions
- **EXPLICITLY NO ANY TYPES** - Always create proper type structures
- Maintain 90%+ test coverage for critical functionality
- Follow security-first development practices
- Implement proper accessibility (WCAG 2.1 AA)

### Performance Requirements
- Frontend: <3s load on 3G, <100ms interaction responses
- API: <200ms average, <500ms P95
- AI responses: <2s time-to-first-token
- Bundle size: <500KB initial, <2MB total

## File Association Patterns

### Always Referenced Files
@../CLAUDE.md - Core development guidelines and commands
@../packages/backend/convex/schema.ts - Backend schema and types

### Sometimes Referenced (when context matches)
@../apps/web/src/components/providers.tsx - Provider configuration
@../apps/web/src/app/layout.tsx - App layout and structure
@../apps/web/package.json - Dependencies and scripts

### On Mention (when explicitly referenced)
@../apps/web/src/components/chat/ - Chat interface components
@../apps/web/src/components/wallet/ - Wallet integration
@../apps/web/src/lib/solana-mobile-config.ts - Solana mobile configuration

## Rule Application Strategy

1. **Global Standards**: Always apply TypeScript, security, and architecture rules
2. **Context Detection**: Apply domain-specific rules based on file patterns
3. **Nested Rules**: Use web-specific rules for frontend development
4. **File Associations**: Include relevant files based on association patterns
5. **Validation**: Ensure consistency across rule applications

## Development Workflow Integration

These rules integrate with the development workflow defined in CLAUDE.md:

- Pre-commit hooks validate code quality and standards
- CI/CD pipeline enforces testing and security requirements
- Pull requests require rule compliance verification
- Documentation updates reflect rule changes and additions

@../CLAUDE.md